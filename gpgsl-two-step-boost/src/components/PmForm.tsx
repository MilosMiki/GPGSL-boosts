// src/components/PmForm.tsx
import { useState, useEffect } from 'react';
import { LoginResponse } from '../types';
import { FaCheck } from 'react-icons/fa';
import { Race } from '../types/race';
import { Team } from '../types/team';
import { Driver } from '../types/driver';

interface PmFormProps {
  loginData: LoginResponse;
  driverBoost: boolean;
  teamBoost: boolean;
  race: Race | null;
  teamBoostType: 'single' | 'double' | null;
  onSendSuccess: () => void;
  driver: Driver | null;
  team: Team | null;
}

export default function PmForm({ loginData, driverBoost, teamBoost, race, teamBoostType, onSendSuccess, driver, team }: PmFormProps) {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState(false);
  const [completedBoosts, setCompletedBoosts] = useState<string[]>([]);
  const [driverTitle, setDriverTitle] = useState<string | null>(null);
  const [teamTitle, setTeamTitle] = useState<string | null>(null);
  
  useEffect(() => {
    const setTitles = () => {
      if(driverBoost){
        setDriverTitle("Driver Boost - " + driver?.name + " - " + race?.venue + " - " + race?.track);
      }
      if(teamBoost){
        setTeamTitle("Team Boost - " + team?.name + " - " + race?.venue + " - " + race?.track + " - " + teamBoostType);
      }
    }
    setTitles();
  }, [driverBoost, teamBoost, driver, team, race, teamBoostType]);

  const raceDetails = race || 
    { name: 'Unknown Race', venue: 'Unknown venue', track: 'Unknown Track', country: 'Unknown Country' };

  const sendBoostRequest = async (boostType: 'driver' | 'team') => {
    const formData = new URLSearchParams();
    formData.append('forum_id', loginData.forum_id || '4');
    formData.append('posting_token:pm', loginData.posting_token || '');
    formData.append('action', 'post');
    formData.append('to_name', 'GPGSL');
    formData.append('recipients', '35483');
    formData.append('subject', boostType === 'driver' && driverTitle ? driverTitle : boostType === 'team' && teamTitle ? teamTitle : 'Unknown title');
    formData.append('message', 'This message was automatically generated by Four Step Boost.');
    formData.append('spamhurdles_pm', loginData.spamhurdles_pm || '');
    formData.append('keep', '1');
    formData.append('post', 'Send PM');
    formData.append('session_cookie', loginData.session_cookie || '');

    const response = await fetch(`${import.meta.env.VITE_API_BASE_URL}/login/send-pm`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: formData.toString(),
    });

    const data = await response.json();
    
    if (!data.success) {
      throw new Error(data.message || 
        (data.response ? "Website returned: " + data.response : `Failed to send ${boostType} boost PM`));
    }

    return boostType;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      const boostsToSend: ('driver' | 'team')[] = [];
      if (driverBoost) {
        boostsToSend.push('driver');
      } 
      if (teamBoost) {
        boostsToSend.push('team');
      }

      for (const boost of boostsToSend) {
        try {
          const completedBoost = await sendBoostRequest(boost);
          setCompletedBoosts(prev => [...prev, completedBoost]);
        } catch (err) {
          throw err; // Stop on first error
        }
      }
      
      setSuccess(true);
      onSendSuccess();
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to send PM');
    } finally {
      setLoading(false);
    }
  };

  if (success) {
    return (
      <div className="success-message">
        <FaCheck />
        <h2>PM Sent Successfully!</h2>
        <p>Your boost{completedBoosts.length > 1 ? 's have' : ' has'} been submitted.</p>
      </div>
    );
  }

  return (
    <div className="pm-form">
      <div className="boost-summary">
        <h3>Boost Confirmation</h3>
        
        {driverBoost && (
          <div className="summary-item">
            <strong>Title:</strong> {driverTitle}
          </div>
        )}
        
        {teamBoost && (
          <div className="summary-item">
            <strong>Title:</strong> {teamTitle}
          </div>
        )}
        
        <div className="summary-item">
          <strong>Race:</strong> {raceDetails.venue} ({raceDetails.track}, {raceDetails.country})
        </div>
      </div>
      
      {error && <div className="error-message">{error}</div>}
      
      <form onSubmit={handleSubmit}>
        <button 
          type="submit" 
          className="btn"
          disabled={loading}
        >
          {loading ? 'Sending...' : 'Confirm & Send PM'}
        </button>
      </form>
    </div>
  );
}